// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  provider          String
  providerAccountId String
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  tokenId           String? @map("token_id")
  sessionState      String? @map("session_state")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email           String    @unique
  password        String?
  emailVerifiedAt DateTime?

  name    String  @default("Не указано")
  picture String  @default("/uploads/no-user-images.png")
  stores  Store[]

  reviews Review[]

  orders    Order[]
  favorites UserFavorites[]
  Account   Account[]

  @@map("user")
}

model VerificationToken {
  id    String @id @default(cuid())
  email String @unique
  token String @unique

  @@unique([email, token])
  @@map("verification_token")
}

model PasswordResetToken {
  id    String @id @default(cuid())
  email String @unique
  token String @unique

  @@unique([email, token])
  @@map("password_reset_token")
}

model Store {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String?

  user   User?  @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  products Product[]

  categories Category[]
  colors     Color[]

  reviews    Review[]
  orderItems OrderItem[]

  @@map("store")
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String

  reviews Review[]

  orderItems OrderItem[]

  price      Int
  images     String[]
  store      Store?    @relation(fields: [storeId], references: [id])
  storeId    String?   @map("store_id")
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id")
  color      Color?    @relation(fields: [colorId], references: [id])
  colorId    String?   @map("color_id")

  favorites UserFavorites[]

  @@unique([title, storeId])
  @@map("product")
}

model UserFavorites {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  @@unique([userId, productId])
  @@map("user_favorites")
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String

  products Product[]
  store    Store?    @relation(fields: [storeId], references: [id])
  storeId  String?   @map("store_id")

  @@map("category")
}


model Color {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String
  value String

  products Product[]
  store    Store?    @relation(fields: [storeId], references: [id])
  storeId  String?   @map("store_id")

  @@map("color")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text      String
  rating    Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")
  store     Store?   @relation(fields: [storeId], references: [id])
  storeId   String?  @map("store_id")

  @@map("review")
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)

  items  OrderItem[]
  total  Int
  user   User?       @relation(fields: [userId], references: [id])
  userId String?     @map("user_id")

  @@map("order")
}

enum EnumOrderStatus {
  PENDING
  PAYED
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Int

  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?  @map("order_id")
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")
  store     Store?   @relation(fields: [storeId], references: [id])
  storeId   String?  @map("store_id")

  @@map("order_item")
}
