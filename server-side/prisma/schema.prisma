generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  provider          String
  providerAccountId String
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  tokenId           String? @map("token_id")
  sessionState      String? @map("session_state")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email           String    @unique
  password        String?
  emailVerifiedAt DateTime?

  name    String @default("Не указано")
  picture String @default("/uploads/no-user-images.png")

  reviews   Review[]
  role      UserRole        @default(USER)
  orders    Order[]
  favorites UserFavorites[]
  Account   Account[]

  @@map("user")
}

model VerificationToken {
  id    String @id @default(cuid())
  email String @unique
  token String @unique

  @@unique([email, token])
  @@map("verification_token")
}

model PasswordResetToken {
  id    String @id @default(cuid())
  email String @unique
  token String @unique

  @@unique([email, token])
  @@map("password_reset_token")
}

model Brand {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String @unique

  product Product[]

  @@map("brand")
}

enum Season {
  WINTER
  SUMMER
  TRANSITIONAL
  ALL_SEASON
}

model Technology {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title   String    @unique
  product Product[]

  @@map("technology")
}

model Material {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String @unique

  @@map("material")
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

model Style {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title   String    @unique
  product Product[]

  @@map("style")
}

enum ProductPart {
  SOLE
  UPPER
  LINING
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String

  reviews Review[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @map("category_id")
  season     Season   @default(ALL_SEASON)

  brand           Brand              @relation(fields: [brandId], references: [id])
  brandId         String             @map("brand_id")
  technology      Technology?        @relation(fields: [technologyId], references: [id])
  technologyId    String?            @map("technology_id")
  gender          Gender             @default(MALE)
  productVariant  ProductVariant[]
  style           Style?             @relation(fields: [styleId], references: [id])
  styleId         String?            @map("style_id")
  productMaterals ProductMaterials[]
  Color           Color?             @relation(fields: [colorId], references: [id])
  colorId         String?

  @@unique([title, brandId])
  @@map("product")
}

model ProductMaterials {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  productId  String @map("product_id")
  materialId String @map("material_id")

  productPart ProductPart
  percentage  Decimal?    @db.Decimal(5, 2)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, productPart, materialId])
  @@map("product_materials")
}

model ProductVariant {
  id                     String                   @id @default(cuid())
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @updatedAt @map("updated_at")
  orderItems             OrderItem[]
  price                  Decimal
  images                 String[]
  favorites              UserFavorites[]
  product                Product?                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId              String?                  @map("product_id")
  ProductVariantQuantity ProductVariantQuantity[]
  ProductVariantColors   ProductVariantColors[]

  @@map("product_variant")
}

model ProductVariantQuantity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity         Int
  size             Size            @relation(fields: [sizeId], references: [id])
  sizeId           String          @map("size_id")
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId String?         @map("product_variant_id")

  @@unique([productVariantId, sizeId])
  @@map("product_variant_quantity")
}

model Color {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title                String                 @unique
  hex                  String                 @unique
  product              Product[]
  ProductVariantColors ProductVariantColors[]

  @@map("color")
}

model Size {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title                  Float
  ProductVariantQuantity ProductVariantQuantity[]

  @@map("size")
}

model ProductVariantColors {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  color            Color          @relation(fields: [colorId], references: [id])
  colorId          String         @map("color_id")
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId String         @map("product_variant_id")

  @@map("product_variant_colors")
}

model UserFavorites {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId String?         @map("product_variant_id")

  @@unique([userId, productVariantId])
  @@map("user_favorites")
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title    String    @unique
  products Product[]

  @@map("category")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  text      String
  rating    Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  @@map("review")
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status OrderStatus @default(PENDING)

  items  OrderItem[]
  total  Int
  user   User?       @relation(fields: [userId], references: [id])
  userId String?     @map("user_id")

  @@map("order")
}

enum OrderStatus {
  PENDING
  PAYED
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Int

  order            Order?          @relation(fields: [orderId], references: [id])
  orderId          String?         @map("order_id")
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId String?         @map("product_variant_id")

  @@map("order_item")
}
